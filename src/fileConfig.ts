import * as vscode from "vscode";
import * as fs from "fs";
import * as path from "path";

const CONFIG_FILES = [
  // ESLint config files
  ".eslintrc",
  ".eslintrc.json",
  ".eslintrc.js",
  ".eslintrc.cjs",
  // Prettier config files
  ".prettierrc",
  ".prettierrc.json",
  ".prettierrc.js",
  ".prettierrc.cjs",
  // TSConfig file
  "tsconfig.json",
];

/**
 * L·∫•y file hi·ªán ƒëang m·ªü trong VS Code
 */
const getCurrentFilePath = (): string | undefined => {
  const activeEditor = vscode.window.activeTextEditor;
  if (!activeEditor) return undefined;
  return activeEditor.document.fileName;
};

/**
 * T√¨m file config ·∫£nh h∆∞·ªüng ƒë·∫øn file hi·ªán t·∫°i
 */
const findConfigFileForCurrentFile = (
  fileName: string
): Record<string, string | undefined> => {
  let currentDir = path.dirname(fileName);
  const appliedConfigs: Record<string, string | undefined> = {};

  while (currentDir) {
    for (const configFile of CONFIG_FILES) {
      const configPath = path.join(currentDir, configFile);
      if (fs.existsSync(configPath)) {
        if (!appliedConfigs[configFile]) {
          appliedConfigs[configFile] = configPath;
        }
      }
    }

    const parentDir = path.dirname(currentDir);
    if (currentDir === parentDir) break; // ƒê√£ t·ªõi th∆∞ m·ª•c root
    currentDir = parentDir;
  }

  return appliedConfigs;
};

/**
 * ƒê·ªçc n·ªôi dung file config v√† tr·∫£ v·ªÅ n·ªôi dung file
 */
const readConfigFileContent = async (
  filePath: string
): Promise<string | null> => {
  try {
    const content = await fs.promises.readFile(filePath, "utf-8");
    console.log(`üìÑ N·ªôi dung c·ªßa file ${filePath}:\n${content}`);
    return content;
  } catch (error) {
    console.error(`‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file ${filePath}:`, error);
    return null;
  }
};

/**
 * H√†m ch√≠nh ƒë·ªÉ ki·ªÉm tra c√°c file config ƒëang ƒë∆∞·ª£c √°p d·ª•ng
 */
export const checkAppliedConfigFiles = async () => {
  const currentFile = getCurrentFilePath();
  if (!currentFile) {
    vscode.window.showWarningMessage("‚ö†Ô∏è Kh√¥ng c√≥ t·ªáp n√†o ƒëang m·ªü.");
    return;
  }

  console.log(`üìò File hi·ªán t·∫°i: ${currentFile}`);

  const appliedConfigs = findConfigFileForCurrentFile(currentFile);
  if (Object.keys(appliedConfigs).length === 0) {
    vscode.window.showInformationMessage(
      "‚ùå Kh√¥ng t√¨m th·∫•y file config √°p d·ª•ng."
    );
    return;
  }

  console.log("üìÑ C√°c file config ƒë√£ t√¨m th·∫•y:", appliedConfigs);

  // L·∫•y n·ªôi dung c·ªßa c√°c file config (n·∫øu c√≥)
  const eslintConfig = appliedConfigs[".eslintrc"]
    ? await readConfigFileContent(appliedConfigs[".eslintrc"])
    : null;

  const prettierConfig = appliedConfigs[".prettierrc"]
    ? await readConfigFileContent(appliedConfigs[".prettierrc"])
    : null;

  const tsConfig = appliedConfigs["tsconfig.json"]
    ? await readConfigFileContent(appliedConfigs["tsconfig.json"])
    : null;

  // T·∫°o context ƒë·ªÉ hi·ªÉn th·ªã
  const contextParts: string[] = [];

  if (eslintConfig) {
    contextParts.push(`
**ESLint Config**:
\`\`\`json
${eslintConfig}
\`\`\`
    `);
  }

  if (prettierConfig) {
    contextParts.push(`
**Prettier Config**:
\`\`\`json
${prettierConfig}
\`\`\`
    `);
  }

  if (tsConfig) {
    contextParts.push(`
**TSConfig**:
\`\`\`json
${tsConfig}
\`\`\`
    `);
  }

  // N·ªëi t·∫•t c·∫£ c√°c ph·∫ßn context th√†nh 1 chu·ªói
  const additionalContext = `
### üìã Additional Context (Configuration Files)
${contextParts.join("\n\n")}
  `;

  // Ch·ªâ log v√† hi·ªÉn th·ªã n·∫øu c√≥ context
  if (contextParts.length > 0) {
    vscode.window.showInformationMessage("‚úÖ ƒê√£ l·∫•y th√¥ng tin file config.");
  } else {
    vscode.window.showInformationMessage("‚ùå Kh√¥ng t√¨m th·∫•y file config.");
  }
};
